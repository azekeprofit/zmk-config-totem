//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 7 8 9 6 15 16 18 19 17 27 28 29 26 25 33 10 11 12 13 32>;
        };

        rht: rht {
            compatible = "zmk,behavior-hold-tap";
            label = "RHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 14 24 23 13 12 22 21 11 10 20 30 19 18 17 16 31>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };

        tri_kz {
            if-layers = <6 7>;
            then-layer = <8>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Ctrl_Z {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
        };

        Ctrl_X {
            bindings = <&kp LC(X)>;
            key-positions = <21 22>;
        };

        Ctrl_C {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
        };

        Ctrl_V {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <30 33>;
        };

        ru {
            bindings = <&ruen 1 LC(LS(NUMBER_2))>;
            key-positions = <9 17>;
        };

        kaz {
            bindings = <&ruen 5 LC(LS(NUMBER_4))>;
            key-positions = <17 25>;
        };

        en {
            bindings = <&ruen 0 LC(LS(NUMBER_3))>;
            key-positions = <9 16>;
        };

        ru_eh {
            bindings = <&kp SQT>;
            key-positions = <0 1>;
            layers = <1 5>;
        };

        hard_sign {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <26 25>;
            layers = <1 5>;
        };

        ru_dot {
            bindings = <&kp SLASH>;
            key-positions = <28 29>;
            layers = <1>;
        };

        kz_dot {
            bindings = <&kp N7>;
            key-positions = <28 29>;
            layers = <5>;
        };

        ru_comma {
            bindings = <&kp LS(SLASH)>;
            key-positions = <27 26>;
            layers = <1>;
        };

        kz_comma {
            bindings = <&kp N6>;
            key-positions = <27 26>;
            layers = <5>;
        };

        ru_x {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <8 9>;
            layers = <1>;
        };

        ru_colon {
            bindings = <&kp LS(NUMBER_6)>;
            key-positions = <28 17>;
            layers = <1>;
        };

        ru_semicolon {
            bindings = <&kp LS(NUMBER_4)>;
            key-positions = <27 28>;
            layers = <1>;
        };

        ru_yo {
            bindings = <&kp GRAVE>;
            key-positions = <3 4>;
            layers = <1>;
        };

        kz_hard_h {
            bindings = <&kp EQUAL>;
            key-positions = <15 16>;
            layers = <5>;
        };

        kz_f {
            bindings = <&kp A>;
            key-positions = <8 9>;
            layers = <5>;
        };

        kz_v {
            bindings = <&kp D>;
            key-positions = <18 19>;
            layers = <5>;
        };

        kz_soft {
            bindings = <&kp M>;
            key-positions = <16 25>;
            layers = <5>;
        };

        kz_ya {
            bindings = <&kp Z>;
            key-positions = <10 11>;
            layers = <5>;
        };

        kz_ch {
            bindings = <&kp X>;
            key-positions = <13 14>;
            layers = <5>;
        };

        kz_ts {
            bindings = <&kp W>;
            key-positions = <1 2>;
            layers = <5>;
        };

        kz_g {
            bindings = <&kp U>;
            key-positions = <16 17>;
            layers = <5>;
        };

        kz_yu {
            bindings = <&kp DOT>;
            key-positions = <18 17>;
            layers = <5>;
        };

        han {
            bindings = <&han 1>;
            key-positions = <7 5>;
            layers = <0>;
        };

        enhan {
            bindings = <&han 0>;
            key-positions = <7 5>;
            layers = <1>;
        };

        hanja {
            bindings = <&kp LANG_HANJA>;
            key-positions = <5 6 7>;
        };
    };

    macros {
        ruen: ruen {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "RUEN";
        };

        han: han {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &kp LC(LS(NUMBER_3)) &kp LANG_HANGEUL>;
            label = "han";
        };

        mouseless: mouseless {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F19 &sl 9>;
            label = "MOUSELESS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
            &kp Q             &kp W        &kp F           &kp P                  &kp B          &kp J      &kp L             &kp U         &kp Y         &kp SEMICOLON
            &ht LEFT_SHIFT A  &ht LCTRL R  &ht LEFT_WIN S  &ht LEFT_ALT T         &kp G          &kp K      &rht RIGHT_ALT N  &rht RMETA E  &rht RCTRL I  &rht RIGHT_SHIFT O
&kp LSHIFT  &kp Z             &kp X        &kp C           &kp D                  &kp V          &kp M      &kp H             &kp COMMA     &kp DOT       &kp ENTER           &kp RSHIFT
                                           &trans          &ht LEFT_SHIFT ESCAPE  &lt 2 SPACE    &lt 3 TAB  &kp BACKSPACE     &trans
            >;
        };

        qwerty-hangul {
            bindings = <
        &trans  &kp W        &kp E       &kp R           &kp T     &kp Y   &kp U            &kp I        &kp O                &kp P
        &trans  &ht LCTRL S  &ht LGUI D  &ht LEFT_ALT F  &kp G     &kp H   &rht LEFT_ALT J  &rht RGUI K  &rht LEFT_CONTROL L  &rht LEFT_SHIFT SEMICOLON
&trans  &kp Z   &kp X        &kp C       &kp V           &kp B     &kp N   &kp M            &trans       &trans               &trans                     &trans
                             &trans      &trans          &trans    &trans  &trans           &trans
            >;
        };

        numbers_symbols {
            bindings = <
        &kp LEFT_PARENTHESIS              &kp NUMBER_1               &kp NUMBER_2           &kp NUMBER_3           &kp GRAVE               &kp SQT    &kp MINUS          &kp PLUS          &kp EQUAL             &kp QUESTION
        &ht LEFT_SHIFT RIGHT_PARENTHESIS  &ht LEFT_CONTROL NUMBER_4  &ht LEFT_GUI NUMBER_5  &ht LEFT_ALT NUMBER_6  &kp N0                  &kp STAR   &rht LEFT_ALT N7   &rht LEFT_GUI N8  &rht LEFT_CONTROL N9  &rht LEFT_SHIFT SEMICOLON
&trans  &trans                            &kp LESS_THAN              &kp LEFT_BRACE         &kp LEFT_BRACKET       &kp NON_US_BACKSLASH    &kp SLASH  &kp RIGHT_BRACKET  &kp RIGHT_BRACE   &kp GREATER_THAN      &trans                     &trans
                                                                     &trans                 &trans                 &trans                  &trans     &trans             &trans
            >;
        };

        navigation {
            bindings = <
        &kp ESCAPE  &trans     &trans        &trans        &trans         &kp INS     &kp HOME  &kp UP_ARROW  &kp END    &kp PAGE_UP
        &kp LSHIFT  &kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &trans         &kp DEL     &kp LEFT  &kp DOWN      &kp RIGHT  &kp PAGE_DOWN
&trans  &trans      &trans     &trans        &trans        &bootloader    &mouseless  &trans    &trans        &trans     &trans         &trans
                               &trans        &trans        &trans         &trans      &trans    &trans
            >;
        };

        tri_layer {
            bindings = <
        &kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0    &bt BT_SEL 2  &out OUT_TOG    &trans     &kp C_MUTE         &trans
        &kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1    &bt BT_SEL 3  &kp LEFT_ALT    &kp RMETA  &kp RIGHT_CONTROL  &kp RSHIFT
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &bt BT_SEL 4  &studio_unlock  &trans     &trans             &bt BT_CLR_ALL  &trans
                         &trans   &trans   &trans          &trans        &trans          &trans
            >;
        };

        kazakh {
            bindings = <
        &kp Q          &kp N9       &kp E        &kp R       &kp T          &kp SEMICOLON  &kp N4         &kp I        &kp N8            &kp P
        &ht LSHIFT N0  &ht LCTRL S  &ht LGUI N5  &ht LALT F  &kp G          &kp H          &rht LALT J    &rht RGUI K  &rht LCTRL N3     &rht LSHIFT Y
&trans  &kp MINUS      &kp N2       &kp C        &kp V       &kp B          &kp N          &kp L          &kp COMMA    &kp LEFT_BRACKET  &trans         &trans
                                    &trans       &trans      &lt 6 SPACE    &lt 7 TAB      &kp BACKSPACE  &trans
            >;
        };

        numbers_symbols_kz {
            bindings = <
        &kp GRAVE                 &kp KP_N1               &kp KP_N2           &kp KP_N3           &trans                  &kp N1           &kp KP_SUBTRACT      &kp KP_PLUS          &kp KP_EQUAL             &kp LS(SLASH)
        &ht LEFT_SHIFT LS(GRAVE)  &ht LEFT_CONTROL KP_N4  &ht LEFT_GUI KP_N5  &ht LEFT_ALT KP_N6  &kp KP_N0               &kp KP_MULTIPLY  &rht LEFT_ALT KP_N7  &rht LEFT_GUI KP_N8  &rht LEFT_CONTROL KP_N9  &rht LEFT_SHIFT SEMICOLON
&trans  &trans                    &trans                  &trans              &trans              &kp NON_US_BACKSLASH    &kp KP_SLASH     &trans               &trans               &trans                   &trans                     &trans
                                                          &trans              &trans              &trans                  &trans           &trans               &trans
            >;
        };

        navigation_kz {
            bindings = <
        &kp ESCAPE  &trans     &trans        &trans        &trans         &kp INS  &kp HOME  &kp UP_ARROW  &kp END    &kp PAGE_UP
        &kp LSHIFT  &kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &trans         &kp DEL  &kp LEFT  &kp DOWN      &kp RIGHT  &kp PAGE_DOWN
&trans  &trans      &trans     &trans        &trans        &bootloader    &trans   &trans    &trans        &trans     &trans         &trans
                               &trans        &trans        &trans         &trans   &trans    &trans
            >;
        };

        tri_layer_kz {
            bindings = <
        &kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0    &bt BT_SEL 2  &out OUT_TOG    &trans     &kp C_MUTE         &trans
        &kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1    &bt BT_SEL 3  &kp LEFT_ALT    &kp RMETA  &kp RIGHT_CONTROL  &kp RSHIFT
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &bt BT_SEL 4  &studio_unlock  &trans     &trans             &bt BT_CLR_ALL  &trans
                         &trans   &trans   &trans          &trans        &trans          &trans
            >;
        };
    };
};
